---
description: 
globs: 
alwaysApply: true
---

This software aims to be an easy to use (where non technical people can use it) security system where there are 4 main entities, the users server (a computer on the users local network), door sensors (microcontrollers which are running circuit python, these sensors should be on the local network), alarms (a microcontroller acting as a relay to an actual alarm, but technically doesn't have to be an alarm, should also be on the users local network), the users phone (which is running a react native app) which can be remote to the users network.

the users server has the following architecture:

- the server is mainly controlled via an electron app which is currently named adminApp and is included in this repo

- the adminApp installs docker and is allowed to run docker commands

- the adminApp instanties the other services via docker

the services which get instantiated via docker currently includes:

- backend: this is an express js app which takes care of handling the updates from the microcontrollers, it also contains the main logic of this security system, handles updating the postgres database and also handles updating the redis in-memory database. This is written in typescript. Currently this is written with the intention of running on the users local network. 

- caddy: this is just a caddy instance which is running as a reverse proxy so that devices can connect to the backend using https and wss (secure websockets). This should run wherever the backend is hosted.

- advertisementService: this just advertises the backend's ip address via udpbroadcasting. should be on the users local network i.e. where the microcontrollers are so that they can use this to know what ip address to contact the backend on. This is coded in typescript and needs access to the postgres and the redis instance.

- postgres: just a postgres database which is used for long storage of mainly logs but includes other useful information. The schema is controlled via the backend using drizzle. Technically this can be hosted anywhere if need be.

- redis: a redis instance which currently acts as an in-memory database for quick access in terms of the door sensors states and also acts as a pub sub entity for the eventService, whereby the various services push events to the eventService via this redis instance. Technically should be on the same network as eventService due to the pub sub nature.

- eventService: handles pushing notifications to an external server (controlled by me) which then itself pushes notifications/events to the users phone using expo (which itself uses firebase and apple). This service gets the events it needs to push via redis as a subscriber to a redis topic.
This is coded in typescript and needs access to the postgres and the redis instance.

- wireguardService: This allows the react native apps to connect to the server despite being on a remote network