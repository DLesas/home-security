version: '3.8'

services:
  redis-stack:
    container_name: redis-stack
    build:
      context: ./redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
      - "${REDIS_UI_PORT:-8001}:8001"
    volumes:
      - ./redis/data:/data
    deploy:
      replicas: 1
    restart: always 
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s 

  postgres:
    build:
      context: ./postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - ./postgres/data:/home/postgres/pgdata/data
    deploy:
      replicas: 1
    restart: always
    user: root
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  web:
    build:
      context: ./webapp
    ports:
      - "3000:3000"

  # backend:
  #   build:
  #     context: ./backend
  #   environment:
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #     - POSTGRES_DB=${POSTGRES_DB}
  #     - POSTGRES_HOST=${POSTGRES_HOST}
  #     - POSTGRES_PORT=${POSTGRES_PORT}
  #     - REDIS_HOST=${REDIS_HOST}
  #     - REDIS_PORT=${REDIS_PORT}
  #     - SENSOR_WARNING_TEMPERATURE=${SENSOR_WARNING_TEMPERATURE}
  #     - SENSOR_CRITICAL_TEMPERATURE=${SENSOR_CRITICAL_TEMPERATURE}
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis-stack:
  #       condition: service_healthy
  #   # ports:
  #   #   - "8080:8080"
  #   #   - "5353:5353/udp"
  #   network_mode: host
  #   restart: always

  # video_processor:
  #   build:
  #     context: ./video_processing
  #   environment:
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #   depends_on:
  #     - redis
  #     - backend
  #   volumes:
  #     - ./video_processing/data:/data

  # caddy:
  #   image: caddy:builder-alpine
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #     - "443:443/udp"
  #   volumes:
  #     - ./caddy/Caddyfile:/etc/caddy/Caddyfile
  #     - caddy_data:caddy/data
  #     - caddy_config:caddy/config


  # caddy_data:
  # caddy_config:


