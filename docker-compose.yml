version: '3.8'

services:
  redis:
    build:
      context: ./redis
    ports:
      - "6379:6379"
      - "8001:8001"
    volumes:
      - ./redis/data:/data
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  postgres:
    build:
      context: ./postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  web:
    build:
      context: ./webapp
    ports:
      - "3000:3000"

  backend:
    build:
      context: ./backend
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - SENSOR_WARNING_TEMPERATURE=${SENSOR_WARNING_TEMPERATURE}
      - SENSOR_CRITICAL_TEMPERATURE=${SENSOR_CRITICAL_TEMPERATURE}
    depends_on:
      - redis
      - postgres
    ports:
      - "8080:8080"

  # video_processor:
  #   build:
  #     context: ./video_processing
  #   environment:
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #   depends_on:
  #     - redis
  #     - backend
  #   volumes:
  #     - ./video_processing/data:/data

  # caddy:
  #   image: caddy:builder-alpine
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #     - "443:443/udp"
  #   volumes:
  #     - ./caddy/Caddyfile:/etc/caddy/Caddyfile
  #     - caddy_data:caddy/data
  #     - caddy_config:caddy/config

volumes:
  redis-data:
  postgres-data:
  # caddy_data:
  # caddy_config:
